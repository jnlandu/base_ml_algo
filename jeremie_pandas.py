# -*- coding: utf-8 -*-
"""jeremie_Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iUqR2YYQLkioVWDe4ScAkO8E_3xUKJW_
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

"""# Assignment Introduction to Pandas

##Part1.
#### Q1: Read each of the files and print the five first lines.

- Read the files
"""

from google.colab import drive
drive.mount('/content/drive')

path = '/content/drive//MyDrive/'

df1 = pd.read_csv(path + 'afr_austral.csv')
df2 = pd.read_csv(path +'afr_central.csv')
df3 = pd.read_csv(path +'afr_east.csv')
df4 = pd.read_csv(path + 'afr_north.csv')
df5 = pd.read_csv(path + 'afr_west.csv')

"""- Display fives rows of each dataframe:"""

df1.head()

df2.head()

df3.head()

df4.head()

df5.head()

"""#### Q2: Merge all the files and add a new column that defines the region where the country belongs to."""

## Add the new column Region to each dataframe:
listRegions = ['Austral', 'central', 'east', 'north', 'west']
i = 0
for df in [df1, df2, df3, df4, df5]:
  df.columns = [column.strip() for column in df.columns]
  df['Region'] = listRegions[i]
  i += 1

### Merging the dataframe:
df = pd.concat([df1,df2,df3,df4,df5], ignore_index=True)

df.shape

"""#### Q3: Calculate and present in the same Dataframe: The mean of the population ($\mu $) of each region, the standard deviation ($\sigma $) and the calculation of the coefficient of variation Cv and conclude."""

## Compute the mean:
df['MeanPop'] = df.Region.apply(lambda x: np.mean(df.loc[df.Region == x].Population))
df.sample(5)

## Compute the standard deviation: std
df['StdPop'] = df.Region.apply(lambda x: np.std(df.loc[df.Region == x].Population))
df.sample(5)

### Compute the CV:
df['CvPop'] = df.StdPop / df.MeanPop
df.sample(5)

"""Conclusion:

## Part 2

#### Q1: Obtain the minimum area of each region and complete with the corresponding country name on the same line in the Series or Dataframe obtained.
"""

### First, find the index of the country with the minimum area in a region.
min_area_indices = df.groupby('Region')['Area'].idxmin()

## Extract Region, country, minimum area :
min_area_countries = df.loc[min_area_indices, ['Region', 'Names', 'Area']]
min_area_countries

"""Q2: Obtain the minimum area of each region and complete with the corresponding
country name on the same line in the Series or Dataframe obtained.
"""



"""Q3: Get the minimum population of each region and complete with the corresponding
country name on the same line in the Series or Dataframe obtained.
"""

### First, find the index of the country with the minimum Population in a region.
min_pop_indices = df.groupby('Region')['Population'].idxmin()

## Extract Region, country, minimum population:
min_pop_countries = df.loc[min_area_indices, ['Region', 'Names', 'Area']]
min_pop_countries

"""Q4: Get the maximum population of each region and complete with the corresponding
country name on the same line in the Series or Dataframe obtained.
"""

### First, find the index of the country with the maximum Population in a region.
max_pop_indices = df.groupby('Region')['Population'].idxmax()
max_pop_indices

## Extract Region, country, minimum population:
max_pop_countries = df.loc[max_pop_indices, ['Region', 'Names', 'Population']]
max_pop_countries["Max. Population"] = max_pop_countries["Population"]
max_pop_countries

"""Q5: Obtain the average population of each region and complete with the name of country
having the population closest to the average of the corresponding group, on the same line
in the Serie or Dataframe obtained.
"""

### The difference between the population and the mean pop of each region:
df['Pop-Mean'] = (df.Population - df.MeanPop).abs().argsort()

## Getting the index of countries with minimum difference in each region:
closest_country_idx  = df.groupby('Region')['Pop-Mean'].idxmin()

## Activate the code, to check:
#df.loc[:,["Region","Names", "Pop-Mean"]]

## Displaying countries with population closest to the mean for each region:
closest_pop_countries = df.loc[closest_country_idx, ['Region', 'Names', 'Population']]
closest_pop_countries

"""Q6: Obtain the average population of each region and complete with the name of the
country having the population furthest from the average of the corresponding group, on
the same line in the Series or Dataframe obtained.
"""

## Getting the index of country with maximum difference in each region:
further_country_idx  = df.groupby('Region')['Pop-Mean'].idxmax()

## Displaying countries with population closest to the mean for each region:
further_pop_countries = df.loc[further_country_idx, ['Region', 'Names', 'Population']]
further_pop_countries

"""Q7: Obtain the average density of each region and complete with the country name
having the density closest to the average of the corresponding group, on the same line in
the Series or Dataframe obtained.
"""

### Create a column average density:
df["RegionAvrgDensity"] = df.Region.apply(lambda x: np.mean(df.loc[df.Region == x].Density))


##Difference in the density:

df["Density-MeanDensity"] = (df["Density"] - df["RegionAvrgDensity"]).abs()


##. Getting the index of the country with the least difference:

closest_country_density_min_idx = df.groupby("Region")['Density-MeanDensity'].idxmin()


## Displaying the country with density close to theregion average density

closest_country_density = df.loc[closest_country_density_min_idx, ["Region", "Names", "Density"]]
closest_country_density

"""Q8: Obtain the average density of each region and complete with the name of the country
having the density furthest from the average of the corresponding group, on the same line
in the Series or Dataframe obtained.
"""

##. Getting the index of the country with the largest difference:

closest_country_density_max_idx = df.groupby("Region")['Density-MeanDensity'].idxmax()


## Displaying the country with density close to theregion average density

further_country_density = df.loc[closest_country_density_max_idx, ["Region", "Names", "Density"]]
further_country_density

"""Q9: Using the population and area fields, calculate the density with the apply and lambda
functions.
"""

### Computing the density:
df["Density2"] = df.apply(lambda x: x["Population"]/ x["Area"], axis =1)
df.loc[:, ["Region", "Names", "Population", "Density", "Density2"]].sample(10)

"""Q10: Create a field that is a 10% increase in population using the apply and lambda
functions.
"""

# Create a field with a 10% increase in population using apply and lambda function
df['10% IncreaseInPopulation'] = df.apply(lambda x: x['Population'] * 0.1, axis=1)


## Display:
df.loc[:, ["Region", "Names", "Population", "10% IncreaseInPopulation"]].sample(10)